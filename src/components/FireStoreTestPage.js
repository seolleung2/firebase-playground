import {
  addDoc,
  arrayRemove,
  arrayUnion,
  collection,
  doc,
  serverTimestamp,
  setDoc,
  Timestamp,
  updateDoc,
} from "firebase/firestore";
import { db } from "../firebaseConfig";

class City {
  constructor(name, state, country) {
    this.name = name;
    this.state = state;
    this.country = country;
  }
  toString() {
    return this.name + ", " + this.state + ", " + this.country;
  }
}

// Firestore data converter
const cityConverter = {
  toFirestore: (city) => {
    return {
      name: city.name,
      state: city.state,
      country: city.country,
    };
  },
  fromFirestore: (snapshot, options) => {
    const data = snapshot.data(options);
    return new City(data.name, data.state, data.country);
  },
};

export default function FireStoreTestPage() {
  const handleAddDocument = async () => {
    // Create

    const city = {
      name: "Kuala Lumpur City gd",
      state: "KL",
      country: "MALAYSIA",
    };

    // city 추가 방식
    await setDoc(doc(db, "cities", "MALAYSIA"), city);

    // 두 번째 인자에 추가해주고 싶은 데이터, 세 번째 인자에 기존 문서에 병합을 하도록 지정
    // 문서가 있는지 확실하지 않은 경우 전체 문서를 실수로 덮어쓰지 않도록 새 데이터를 기존 문서와 병합하는 옵션을 전달
    await setDoc(doc(db, "cities", "MALAYSIA"), { capital: true }, { merge: true });
  };

  const addVariousDataTypes = async () => {
    const docData = {
      stringExample: "Hello world!",
      booleanExample: true,
      numberExample: 3.14159265,
      dateExample: Timestamp.fromDate(new Date("December 10, 1815")),
      arrayExample: [5, true, "hello"],
      nullExample: null,
      objectExample: {
        a: 5,
        b: {
          nested: "foo",
        },
      },
    };
    await setDoc(doc(db, "data", "one"), docData);
  };

  const handleConverterTest = async () => {
    // Set with cityConverter
    const ref = doc(db, "cities", "LA").withConverter(cityConverter);

    console.log("ref", ref);

    await setDoc(ref, new City("Los Angeles", "CA", "USA"));
  };

  const handleAddDoc = async () => {
    const docRef = await addDoc(collection(db, "cities"), {
      name: "Tokyo",
      country: "Japan",
    });
    console.log("Document written with ID: ", docRef.id);
  };

  const handleAutoGeneratedRefId = async () => {
    // Add a new document with a generated id
    const newCityRef = doc(collection(db, "cities"));
    console.log("🚀 ~ handleAutoGeneratedRefId ~ newCityRef:", newCityRef);
  };

  const handleUpdateDoc = async () => {
    const laRef = doc(db, "cities", "LA");
    console.log("🚀 ~ handleUpdateDoc ~ laRef:", laRef);

    // Set the "capital" field of the city "LA"
    await updateDoc(laRef, {
      myFavorite: false,
      timestamp: serverTimestamp(),
    });
  };

  const handleUpdateNestedObj = async () => {
    const frankDocRef = doc(db, "users", "frank");
    console.log("🚀 ~ handleUpdateNestedObj ~ frankDocRef:", frankDocRef);

    // await setDoc(frankDocRef, {
    //   name: "Frank",
    //   favorites: { food: "Pizza", color: "Blue", subject: "recess" },
    //   age: 12,
    // });

    await updateDoc(frankDocRef, {
      age: 14,
      "favorites.color": "Red",
    });
  };

  const handleUpdateArrayItem = async () => {
    const firstDataRef = doc(db, "data", "one");

    // array 요소 업데이트
    await updateDoc(firstDataRef, {
      arrayExample: arrayUnion("world"),
    });

    // array 요소 삭제
    await updateDoc(firstDataRef, {
      arrayExample: arrayRemove("hello"),
    });
  };

  return (
    <div>
      <h1>FireStore Test Page</h1>
      <button onClick={handleAddDocument}>Click me to add a new document!</button>
      <button onClick={addVariousDataTypes}>데이터의 다양한 유형 추가하기</button>
      <button onClick={handleConverterTest}>FireStore Converter Test</button>
      <button onClick={handleAddDoc}>addDoc()호출</button>
      <button onClick={handleAutoGeneratedRefId}>자동 생성 ID 를 이용한 문서 참조 및 사용</button>
      <button onClick={handleUpdateDoc}>특정 문서 업데이트</button>
      <button onClick={handleUpdateNestedObj}>중첩 객체의 필드 업데이트</button>
      <button onClick={handleUpdateArrayItem}>배열요소 필드 업데이트</button>
    </div>
  );
}
